From 3e330e14d4105db84899379022a05b4613733e67 Mon Sep 17 00:00:00 2001
From: patch <patch@segfault.err>
Date: Wed, 14 Jul 2021 15:55:12 +0200
Subject: [PATCH] Addressing externalpipe vs newterm compatibility issue

---
 config.def.h |  1 +
 st.c         | 40 +++++++++++++++++++++++++++++++++++++++-
 st.h         |  2 +-
 3 files changed, 41 insertions(+), 2 deletions(-)

diff --git a/config.def.h b/config.def.h
index d4c008f..4faaf28 100644
--- a/config.def.h
+++ b/config.def.h
@@ -268,6 +268,7 @@ static Shortcut shortcuts[] = {
 	{ TERMMOD,              XK_V,           clippaste,      {.i =  0} },
 	{ TERMMOD,              XK_Y,           selpaste,       {.i =  0} },
 	{ ShiftMask,            XK_Insert,      selpaste,       {.i =  0} },
+	{ TERMMOD,              XK_Return,      newterm,        {.i =  0} },
 	{ TERMMOD,              XK_Num_Lock,    numlock,        {.i =  0} },
 	{ ShiftMask,            XK_Page_Up,     kscrollup,      {.i = -1} },
 	{ ShiftMask,            XK_Page_Down,   kscrolldown,    {.i = -1} },
diff --git a/st.c b/st.c
index 721022a..d85e703 100644
--- a/st.c
+++ b/st.c
@@ -160,6 +160,7 @@ typedef struct {
 } STREscape;

 static void execsh(char *, char **);
+static char *getcwd_by_pid(pid_t pid);
 static void stty(char **);
 static void sigchld(int);
 static void ttywriteraw(const char *, size_t);
@@ -231,6 +232,7 @@ static STREscape strescseq;
 static int iofd = 1;
 static int cmdfd;
 static pid_t pid;
+static int extpipeactive = 0;

 static uchar utfbyte[UTF_SIZ + 1] = {0x80,    0, 0xC0, 0xE0, 0xF0};
 static uchar utfmask[UTF_SIZ + 1] = {0xC0, 0x80, 0xE0, 0xF0, 0xF8};
@@ -283,6 +285,37 @@ xstrdup(char *s)
 	return s;
 }

+void
+newterm(const Arg* a)
+{
+	int res;
+	switch (fork()) {
+	case -1:
+		die("fork failed: %s\n", strerror(errno));
+		break;
+	case 0:
+		switch (fork()) {
+		case -1:
+			die("fork failed: %s\n", strerror(errno));
+			break;
+		case 0:
+			res = chdir(getcwd_by_pid(pid));
+			execlp("st", "./st", NULL);
+			break;
+		default:
+			exit(0);
+		}
+	default:
+		wait(NULL);
+	}
+}
+
+static char *getcwd_by_pid(pid_t pid) {
+	char buf[32];
+	snprintf(buf, sizeof buf, "/proc/%d/cwd", pid);
+	return realpath(buf, NULL);
+}
+
 size_t
 utf8decode(const char *c, Rune *u, size_t clen)
 {
@@ -726,15 +759,19 @@ sigchld(int a)
 	int stat;
 	pid_t p;

-	if ((p = waitpid(pid, &stat, WNOHANG)) < 0)
+	if ((p = waitpid((extpipeactive ? -1 : pid), &stat, WNOHANG)) < 0)
 		die("waiting for pid %hd failed: %s\n", pid, strerror(errno));

 	if (pid != p) {
+		if (!extpipeactive)
+			return;
+
 		if (p == 0 && wait(&stat) < 0)
 			die("wait: %s\n", strerror(errno));

 		/* reinstall sigchld handler */
 		signal(SIGCHLD, sigchld);
+		extpipeactive = 0;
 		return;
 	}

@@ -2057,6 +2094,7 @@ externalpipe(const Arg *arg)
 	close(to[1]);
 	/* restore */
 	signal(SIGPIPE, oldsigpipe);
+	extpipeactive = 1;
 }

 void
diff --git a/st.h b/st.h
index 2b59bf3..a7d3170 100644
--- a/st.h
+++ b/st.h
@@ -91,7 +91,7 @@ void printscreen(const Arg *);
 void printsel(const Arg *);
 void sendbreak(const Arg *);
 void toggleprinter(const Arg *);
-
+void newterm(const Arg *);
 int tattrset(int);
 int tisaltscr(void);
 void tnew(int, int);
--
2.32.0